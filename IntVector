#include <cstring>
#include <algorithm>

class IntVector {
private:
    int* data;
    size_t size;
    size_t capacity;

public:
    IntVector() : data(nullptr), size(0), capacity(0) {}


    explicit IntVector(size_t cnt) : size(cnt), capacity(cnt) {
        data = new int[cnt];
        memset(data, 0, cnt * sizeof(int));
    }


    explicit IntVector(std::initializer_list<int> init_list) :
            size(init_list.size()),
            capacity(init_list.size()) {
        data = new int[size];
        std::copy(init_list.begin(), init_list.end(), data);
    }


    IntVector(const IntVector& other) : size(other.size), capacity(other.capacity) {
        data = new int[other.capacity];
        memcpy(data, other.data, other.size * sizeof(int));
    }


    IntVector(IntVector&& other) noexcept :
            data(other.data),
            size(other.size),
            capacity(other.capacity) {
        other.data = nullptr;
        other.size = 0;
        other.capacity = 0;
    }


    IntVector& operator=(IntVector other) {
        std::swap(data, other.data);
        std::swap(size, other.size);
        std::swap(capacity, other.capacity);
        return *this;
    }


    ~IntVector() {
        delete[] data;
    }


    void Swap(IntVector& other) {
        std::swap(data, other.data);
        std::swap(size, other.size);
        std::swap(capacity, other.capacity);
    }


    int& operator[](size_t index) {
        return data[index];
    }


    const int& operator[](size_t index) const {
        return data[index];
    }


    size_t Size() const {
        return size;
    }


    size_t Capacity() const {
        return capacity;
    }


    void PushBack(int value) {
        if (size == capacity) {
            size_t new_capacity;
            if (capacity == 0)
                new_capacity = 1;
            else
                new_capacity = capacity * 2;
            int* new_data = new int[new_capacity];
            memcpy(new_data, data, size * sizeof(int));
            delete[] data;
            data = new_data;
            capacity = new_capacity;
        }
        data[size] = value;
        ++size;
    }


    void PopBack() {
        if (size > 0) {
            --size;
        }
    }


    void Clear() {
        size = 0;
    }


    void Reserve(size_t new_capacity) {
        if (new_capacity >= capacity) {
            int* new_data = new int[new_capacity];
            memcpy(new_data, data, size * sizeof(int));
            delete[] data;
            data = new_data;
            capacity = new_capacity;
        }
    }
};

int main() {

    return 0;
}
