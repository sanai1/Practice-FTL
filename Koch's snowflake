#include <SFML/Graphics.hpp>
#include <bits/stdc++.h>

using namespace std;

int status = 0;
void draw(vector<vector<pair<int, int>>>& mas, sf::RenderWindow& window) {
    for (int c = 0; c < mas[status].size(); c++) {
        if (c == mas[status].size() - 1) {
            int x0 = mas[status][c].first, y0 = mas[status][c].second;
            int x1 = mas[status][0].first, y1 = mas[status][0].second;
            sf::Vertex line[] = {
                sf::Vertex(sf::Vector2f(x0, y0)),
                sf::Vertex(sf::Vector2f(x1, y1))
            };
            window.draw(line, 2, sf::Lines);
        } else {
            int x0 = mas[status][c].first, y0 = mas[status][c].second;
            int x1 = mas[status][c+1].first, y1 = mas[status][c+1].second;
            sf::Vertex line[] = {
                sf::Vertex(sf::Vector2f(x0, y0)),
                sf::Vertex(sf::Vector2f(x1, y1))
            };
            window.draw(line, 2, sf::Lines);
        }
    }
}

void init(vector<vector<pair<int, int>>>& mas) {
    for (int i = 1; i < mas.size(); i++) {
        for (int c = 0; c < mas[i].size(); c++) {
            int x0 = mas[i][c].first, y0 = mas[i][c].second;
            int x1, y1;
            if (c == mas[i].size() - 1) {
                x1 = x0 + (mas[i][0].first - x0)/3, y1 = y0 + (mas[i][0].second - y0)/3;
            } else {
                x1 = x0 + (mas[i][c+1].first - x0)/3, y1 = y0 + (mas[i][c+1].second - y0)/3;
            }
            mas[i].insert(mas[i].begin() + c++ + 1, {x1, y1});

            int x2, y2;
            x2 = (-1)*(x0 - x1)/2 - sqrt(3)*(y0 - y1)/2 + x1;
            y2 = sqrt(3)*(x0 - x1)/2 - (y0 - y1)/2 + y1;
            mas[i].insert(mas[i].begin() + c++ + 1, {x2, y2});

            int x3 = (x1 - x2)/2 + sqrt(3)*(y1 - y2)/2 + x2;
            int y3 = (-1)*sqrt(3)*(x1 - x2)/2 + (y1 - y2)/2 + y2;
            mas[i].insert(mas[i].begin() + c++ + 1, {x3, y3});
        }
        if (i < mas.size() - 1) {
            mas[i+1] = mas[i];
        }
    }
}

int main() {
    sf::RenderWindow window(sf::VideoMode(800, 1000), "Koch's snowflake");

    sf::CircleShape trLeft(50.f, 3), trRight(50.f, 3);
    trLeft.setFillColor(sf::Color::Green);
    trRight.setFillColor(sf::Color::Green);

    trLeft.setPosition(40.f, 990.f);
    trRight.setPosition(750.f, 890.f);

    trLeft.setRotation(270.f);
    trRight.setRotation(90.f);
    

    sf::RectangleShape upRectangle(sf::Vector2f(370.f, 100.f));
    upRectangle.setFillColor(sf::Color::Yellow);
    upRectangle.setPosition(20.f, 890.f);

    sf::RectangleShape downRectangle(sf::Vector2f(370.f, 100.f));
    downRectangle.setFillColor(sf::Color::Yellow);
    downRectangle.setPosition(400.f, 890.f);

    vector<vector<pair<int, int>>> mas;
    mas.push_back({});
    mas[0].push_back({50, 600});
    mas[0].push_back({100+578/2, 100});
    mas[0].push_back({100+577, 600});
    for (int i = 0; i < 5; i++) {
        mas.push_back({});
    }
    mas[1] = mas[0];
    init(mas);

    while (window.isOpen()) {
        sf::Vector2i mousePoz = sf::Mouse::getPosition(window);

        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
            
            upRectangle.setFillColor(sf::Color::Yellow);
            downRectangle.setFillColor(sf::Color::Yellow);

            if (event.type == sf::Event::MouseButtonPressed)
                if (event.key.code == sf::Mouse::Left)
                    if (upRectangle.getGlobalBounds().contains(mousePoz.x, mousePoz.y)) {
                        if (status - 1 >= 0) {
                            upRectangle.setFillColor(sf::Color::White);
                            status--;
                        } else {
                            upRectangle.setFillColor(sf::Color::Red);
                        }
                    } else if (downRectangle.getGlobalBounds().contains(mousePoz.x, mousePoz.y)) {
                        if (status + 1 < 6) {
                            downRectangle.setFillColor(sf::Color::White);
                            status++;
                        } else {
                            downRectangle.setFillColor(sf::Color::Red);
                        }
                    }
        }

        window.clear();

        draw(mas, window);
        
        window.draw(upRectangle);
        window.draw(downRectangle);
        window.draw(trLeft);
        window.draw(trRight);
        
        window.display();
    }

    return 0;
}

/*

g++ -c main.cpp

g++ main.o -o sfml-app -lsfml-graphics -lsfml-window -lsfml-system

./sfml-app

*/
